@using System
@using System.Linq
@using Sambit.Player.Client
@using Sambit.Player.Health
@using Sandbox;
@inherits PanelComponent

<root>
	<div class="gambit-top">
		@*<img src="Textures/ui/gambit/topbar_center.png" class="top-bar-center"/>*@
		<div style="top: 29px; position: absolute">
			<div class="top-bar-sideburns"></div>
			<div style="background-color: rgba(0,0,0,0); width: 842px; height: 2px;"></div>
			<div class="top-bar-sideburns"></div>
		</div>
		<div style="top: 33px">
			<div>
				<div class="team-mote-bar">

					<div class="team-mote-bar-inner team-mote-bar-inner-blue" style="width: @MotesLeftPercent%; right: 0; border-radius:  300px; "></div>
					@foreach ( var threshold in InvasionPortalThresholds )
					{
						//<img class="team-mote-bar-invasion-flag" style="right: @( (float)threshold / MaxMotes * 320 - 7 )px;" src="Textures/ui/gambit/mote_bar_portal_marker.png">
					}
				</div>
				<div class="team-mote-counter">
					<label>@MotesLeft</label>
				</div>
				<div class="blocker-icons" style="right: 62px">
					<label>
						@* @if ( BlockersLeft?.Count > 0 ) *@
						@* { *@
						@* 	<label> *@
						@* 		@foreach ( var t in BlockersLeft ) *@
						@* 		{ *@
						@* 			@t.Glyph() *@
						@* 		} *@
						@* 	</label> *@
						@* } *@
					</label>
				</div>
				<div class="team-blocker-bar" style="right: 88px">
				</div>
			</div>

			<div style="width: 112px"></div>

			<div>
				<div class="team-blocker-bar" style="left: 88px">
				</div>
				<div class="blocker-icons" style="left: 72px">
					@* @if ( BlockersRight?.Count > 0 ) *@
					@* { *@
					@* 	<label> *@
					@* 		@foreach ( var t in BlockersRight ) *@
					@* 		{ *@
					@* 			@t.Glyph() *@
					@* 		} *@
					@* 	</label> *@
					@* } *@
				</div>
				<div class="team-mote-counter">
					<label>
						@playerScore;
					</label>
				</div>
				<div class="team-mote-bar">

					<div class="team-mote-bar-inner team-mote-bar-inner-red" style="width: @MotesRightPercent%; left: 0; border-radius:  300px; "></div>
					@foreach ( var threshold in InvasionPortalThresholds )
					{
						//<img class="team-mote-bar-invasion-flag flip-horizontal" style="left: @( (float)threshold / MaxMotes * 320 - 6 )px;" src="Textures/ui/gambit/mote_bar_portal_marker.png">
					}
				</div>
			</div>
		</div>
	</div>

</root>

@code
{

	public int[] InvasionPortalThresholds { get; set; } = { 40, 80 };

	public uint MaxMotes { get; set; } = 100;
	public uint MotesLeft { get; set; } = 0;
	public uint MotesHeldLeft { get; set; } = 0;
	public uint MotesRight { get; set; } = 0;
	public uint MotesHeldRight { get; set; } = 0;

	public float MotesLeftPercent => ((float)MotesLeft / MaxMotes) * 100;
	public float MotesRightPercent => ((float)MotesRight / MaxMotes) * 100;
	public uint playerScore { get; set; }
	public uint secondHighest { get; set; }
	public uint firstHighest { get; set; }

	protected override void OnFixedUpdate()
	{
		var scores = Scene.GetAllComponents<PlayerHealth>()
			.Select( x => x.PlayerKills )
			.Distinct() // Optional: If you want distinct scores
			.OrderByDescending( x => x );
		firstHighest = scores.Skip( 0 ).FirstOrDefault();
		secondHighest = scores.Skip( 1 ).FirstOrDefault();

		if ( Client.Local == null ) return;

		var roundManager = Game.ActiveScene.GetAllComponents<RoundManager>().First();

		MotesLeft = Client.Local.Components.Get<PlayerHealth>().PlayerKills;
		MotesRight = playerScore;

		if ( firstHighest == MotesLeft )
		{
			playerScore = secondHighest;
		}
		else
		{
			playerScore = firstHighest;
		}

		StateHasChanged();
	}
}
